from database import ImageModel, AnnotationModel

class AddAnnotationsToImageUseCase:
    def execute(self, image_id, category_id_map, annotation_data_list):
        annotation_id_list = self.create_all_annotations(image_id, category_id_map, annotation_data_list)
        self.update_num_annotations_in_image(image_id, annotation_id_list)
        return annotation_id_list

    def create_all_annotations(self, image_id, category_id_map, annotation_data_list):
        # result = []
        return list(
            map(
                lambda a: self.create_annotation(image_id, category_id_map, a),
                annotation_data_list
            )
        )

    def create_annotation(self,image_id, category_id_map, annotation_data):
        # annotation data image_id is category_data_id and parser has bug, which needs to fix
        # category_id_map is a map used to map from 
        # category_data_id which is generated by parser to category_id which is generated by database
        # In order to save annotation to database, annotation need to use category id generated by database
        category_data_id = annotation_data['image_id']
        category_id = category_id_map[category_data_id]
        annotation = AnnotationModel(
            image_id=image_id,
            category_id=category_id,
            metadata=annotation_data['metadata'],
            segmentation=annotation_data['segmentation'],
            keypoints=[],
            isbbox=False
        )
        annotation.save()
        annotation.update(set__metadata=annotation_data['metadata'])
        return annotation.id

    def update_num_annotations_in_image(self, image_id, annotation_id_list):
        image = ImageModel.find_by(image_id)
        num_annotations_to_add = len(annotation_id_list)
        image.add_num_annotation(num_annotations_to_add)